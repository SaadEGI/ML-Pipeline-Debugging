 1| import sys
 2| import os
 3| import pandas as pd
 4| from sklearn.preprocessing import Normalizer, OneHotEncoder
 5| from sklearn.compose import ColumnTransformer
 6| from sklearn.pipeline import Pipeline
 7| from sklearn.ensemble import RandomForestClassifier
 8| from sklearn.model_selection import train_test_split
 9| from sklearn.impute import SimpleImputer
10| from sklearn.metrics import classification_report
11| 
12| 
13| current_dir = os.path.dirname(os.path.abspath(__file__))
14| parent_dir = os.path.dirname(current_dir)
15| sys.path.append(parent_dir)
16| 
17| from utils import get_project_root
18| 
19| 
20| project_root = get_project_root()
21| 
22| 
23| raw_data_file = os.path.join(project_root, "datasets", "adult_data", "adult_data.csv")
24| data = pd.read_csv(raw_data_file)
25| 
26| 
27| data['occupation'] = data['occupation'].str.lower()  
28| data['occupation'] = data['occupation'].str.replace('-', ' ')  
29| 
30| 
31| data['native-country'] = data['native-country'].apply(lambda x: 'North America')  
32| 
33| 
34| X_train, X_test, y_train, y_test = train_test_split(data.drop('salary', axis=1), data['salary'], test_size=0.2)
35| 
36| 
37| numeric_features = X_train.select_dtypes(include=['int64', 'float64']).columns
38| categorical_features = X_train.select_dtypes(include=['object']).columns
39| 
40| numeric_transformer = Pipeline(steps=[
41|     ('imputer', SimpleImputer(strategy='median')),
42|     ('normalizer', Normalizer())
43| ])
44| 
45| categorical_transformer = Pipeline(steps=[
46|     ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),
47|     ('onehot', OneHotEncoder(handle_unknown='ignore'))
48| ])
49| 
50| preprocessor = ColumnTransformer(
51|     transformers=[
52|         ('num', numeric_transformer, numeric_features),
53|         ('cat', categorical_transformer, categorical_features)
54|     ])
55| 
56| 
57| pipeline = Pipeline(steps=[
58|     ('preprocessor', preprocessor),
59|     ('classifier', RandomForestClassifier())
60| ])
61| 
62| 
63| pipeline.fit(X_train, y_train)
64| 
65| 
66| score = pipeline.score(X_test, y_test)
67| print(f"Model accuracy: {score:.2f}")
68| y_pred = pipeline.predict(X_test)
69| print(classification_report(y_test, y_pred, zero_division=0))