 1| import os
 2| import sys
 3| import pandas as pd
 4| from sklearn.model_selection import train_test_split
 5| from sklearn.linear_model import LogisticRegression
 6| from sklearn.metrics import classification_report
 7| from sklearn.preprocessing import OneHotEncoder
 8| 
 9| current_dir = os.path.dirname(os.path.abspath(__file__))
10| parent_dir = os.path.dirname(current_dir)
11| sys.path.append(parent_dir)
12| 
13| from utils import get_project_root
14| 
15| project_root = get_project_root()
16| 
17| raw_data_file = os.path.join(project_root, "datasets", "diabetes_indicator", "5050_split.csv")
18| data = pd.read_csv(raw_data_file)
19| 
20| print("Raw data gender distribution:\n", data['Sex'].value_counts(normalize=True).round(2))
21| 
22| data_filtered = data[data['Age'] > 4]
23| data_filtered = data_filtered[data_filtered['HighChol'] > 0]
24| 
25| X = data_filtered.drop('Diabetes_binary', axis=1)
26| y = data_filtered['Diabetes_binary']
27| X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
28| 
29| print("Test set gender distribution:\n", X_test['Sex'].value_counts(normalize=True).round(2))
30| 
31| encoder = OneHotEncoder(drop='first', sparse_output=False, handle_unknown='ignore')
32| X_train_encoded = encoder.fit_transform(X_train.select_dtypes(include=['object']))
33| X_test_encoded = encoder.transform(X_test.select_dtypes(include=['object']))
34| 
35| X_train_encoded_df = pd.DataFrame(X_train_encoded, columns=encoder.get_feature_names_out(X_train.select_dtypes(include=['object']).columns))
36| X_test_encoded_df = pd.DataFrame(X_test_encoded, columns=encoder.get_feature_names_out(X_test.select_dtypes(include=['object']).columns))
37| 
38| X_train_final = pd.concat([X_train.select_dtypes(exclude=['object']).reset_index(drop=True), X_train_encoded_df.reset_index(drop=True)], axis=1)
39| X_test_final = pd.concat([X_test.select_dtypes(exclude=['object']).reset_index(drop=True), X_test_encoded_df.reset_index(drop=True)], axis=1)
40| 
41| X_train_final.columns = X_train_final.columns.astype(str)
42| X_test_final.columns = X_test_final.columns.astype(str)
43| 
44| model = LogisticRegression(max_iter=1000)
45| model.fit(X_train_final, y_train)
46| 
47| y_pred = model.predict(X_test_final)
48| print(classification_report(y_test, y_pred))