 1| import sys
 2| import os
 3| import pandas as pd
 4| from sklearn.preprocessing import Normalizer, OneHotEncoder
 5| from sklearn.compose import ColumnTransformer
 6| from sklearn.pipeline import Pipeline
 7| from sklearn.ensemble import RandomForestClassifier
 8| from sklearn.model_selection import train_test_split
 9| from sklearn.impute import SimpleImputer
10| from sklearn.metrics import classification_report
11| 
12| current_dir = os.path.dirname(os.path.abspath(__file__))
13| parent_dir = os.path.dirname(current_dir)
14| sys.path.append(parent_dir)
15| 
16| from utils import get_project_root
17| 
18| project_root = get_project_root()
19| 
20| raw_data_file = os.path.join(project_root, "datasets", "adult_data", "adult_data.csv")
21| data = pd.read_csv(raw_data_file)
22| 
23| data['occupation'] = data['occupation'].str.lower() 
24| data['occupation'] = data['occupation'].str.replace('-', ' ') 
25| 
26| data['native-country'] = data['native-country'].apply(lambda x: 'North America') 
27| 
28| X_train, X_test, y_train, y_test = train_test_split(data.drop('salary', axis=1), data['salary'], test_size=0.2)
29| 
30| numeric_features = X_train.select_dtypes(include=['int64', 'float64']).columns
31| categorical_features = X_train.select_dtypes(include=['object']).columns
32| 
33| numeric_transformer = Pipeline(steps=[
34|     ('imputer', SimpleImputer(strategy='median')),
35|     ('normalizer', Normalizer())
36| ])
37| 
38| categorical_transformer = Pipeline(steps=[
39|     ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),
40|     ('onehot', OneHotEncoder(handle_unknown='ignore'))
41| ])
42| 
43| preprocessor = ColumnTransformer(
44|     transformers=[
45|         ('num', numeric_transformer, numeric_features),
46|         ('cat', categorical_transformer, categorical_features)
47|     ])
48| 
49| pipeline = Pipeline(steps=[
50|     ('preprocessor', preprocessor),
51|     ('classifier', RandomForestClassifier())
52| ])
53| 
54| pipeline.fit(X_train, y_train)
55| 
56| score = pipeline.score(X_test, y_test)
57| print(f"Model accuracy: {score:.2f}")
58| y_pred = pipeline.predict(X_test)
59| print(classification_report(y_test, y_pred, zero_division=0))