 1| import pandas as pd
 2| import os
 3| import sys
 4| from sklearn.compose import ColumnTransformer
 5| from sklearn.impute import SimpleImputer
 6| from sklearn.linear_model import LogisticRegression
 7| from sklearn.pipeline import Pipeline
 8| from sklearn.preprocessing import OneHotEncoder, StandardScaler, LabelEncoder
 9| from sklearn.model_selection import train_test_split
10| from sklearn.metrics import classification_report
11| 
12| current_dir = os.path.dirname(os.path.abspath(__file__))
13| parent_dir = os.path.dirname(current_dir)
14| sys.path.append(parent_dir)
15| 
16| from utils import get_project_root
17| 
18| project_root = get_project_root()
19| 
20| raw_data_file = os.path.join(project_root, "datasets", "adult_data", "adult_data.csv")
21| data = pd.read_csv(raw_data_file)
22| 
23| numeric_columns = ['age', 'hours-per-week']
24| categorical_columns = ['workclass', 'education', 'marital-status', 'occupation', 'relationship', 'race', 'sex', 'native-country']
25| 
26| target = 'salary'
27| 
28| numeric_transformer = Pipeline(steps=[
29|     ('imputer', SimpleImputer(strategy='mean')),
30|     ('scaler', StandardScaler())
31| ])
32| 
33| categorical_transformer = Pipeline(steps=[
34|     ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),
35|     ('onehot', OneHotEncoder(handle_unknown='ignore'))
36| ])
37| 
38| preprocessor = ColumnTransformer(
39|     transformers=[
40|         ('num', numeric_transformer, numeric_columns),
41|         ('cat', categorical_transformer, categorical_columns)
42|     ])
43| 
44| X = data[numeric_columns + categorical_columns]
45| y = data[target]
46| 
47| label_encoder = LabelEncoder()
48| y_encoded = label_encoder.fit_transform(y)
49| 
50| X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)
51| 
52| model = Pipeline(steps=[
53|     ('preprocessor', preprocessor),
54|     ('classifier', LogisticRegression())
55| ])
56| 
57| model.fit(X_train, y_train)
58| 
59| y_pred = model.predict(X_test)
60| 
61| print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))