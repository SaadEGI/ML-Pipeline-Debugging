 1| 
 2| import os
 3| import sys
 4| import pandas as pd
 5| from sklearn.compose import ColumnTransformer
 6| from sklearn.impute import SimpleImputer
 7| from sklearn.linear_model import LogisticRegression
 8| from sklearn.pipeline import Pipeline
 9| from sklearn.preprocessing import OneHotEncoder, StandardScaler, label_binarize, KBinsDiscretizer
10| from sklearn.model_selection import train_test_split
11| from sklearn.metrics import classification_report
12| 
13| current_dir = os.path.dirname(os.path.abspath(__file__))
14| parent_dir = os.path.dirname(current_dir)
15| sys.path.append(parent_dir)
16| 
17| from utils import get_project_root
18| 
19| project_root = get_project_root()
20| 
21| raw_data_file = os.path.join(project_root, "datasets", "compas_scores", "compas-scores-two-years.csv")
22| raw_data = pd.read_csv(raw_data_file)
23| 
24| train_data, test_data = train_test_split(raw_data, test_size=0.2, random_state=42)
25| 
26| columns_to_use = ['sex', 'dob', 'age', 'c_charge_degree', 'race', 'score_text', 'priors_count', 'days_b_screening_arrest',
27|                   'decile_score', 'is_recid', 'two_year_recid', 'c_jail_in', 'c_jail_out']
28| 
29| train_data = train_data[columns_to_use]
30| test_data = test_data[columns_to_use]
31| 
32| print("Shape of training data:", train_data.shape)
33| print("Shape of testing data:", test_data.shape)
34| 
35| train_data = train_data.replace('Medium', "Low")
36| test_data = test_data.replace('Medium', "Low")
37| 
38| train_labels = label_binarize(train_data['score_text'], classes=['High', 'Low']).ravel()
39| test_labels = label_binarize(test_data['score_text'], classes=['High', 'Low']).ravel()
40| 
41| train_data = train_data.drop(columns=['score_text'])
42| test_data = test_data.drop(columns=['score_text'])
43| 
44| train_data.reset_index(drop=True, inplace=True)
45| test_data.reset_index(drop=True, inplace=True)
46| 
47| impute1_and_onehot = Pipeline([('imputer1', SimpleImputer(strategy='most_frequent')),
48|                                ('onehot', OneHotEncoder(handle_unknown='ignore'))])
49| impute2_and_bin = Pipeline([('imputer2', SimpleImputer(strategy='mean')),
50|                             ('discretizer', KBinsDiscretizer(n_bins=4, encode='ordinal', strategy='uniform'))])
51| 
52| featurizer = ColumnTransformer(transformers=[
53|     ('impute1_and_onehot', impute1_and_onehot, ['is_recid']),
54|     ('impute2_and_bin', impute2_and_bin, ['age'])
55| ])
56| 
57| pipeline = Pipeline(steps=[('featurizer', featurizer),
58|     ('classifier', LogisticRegression())
59| ])
60| 
61| pipeline.fit(train_data, train_labels)
62| 
63| print("Model score:", pipeline.score(test_data, test_labels))
64| 
65| print(classification_report(test_labels, pipeline.predict(test_data), zero_division=0))