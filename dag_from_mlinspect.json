[
  DagNode(node_id=0,
  code_location=BasicCodeLocation(lineno=21),
  operator_info=OperatorContext(operator=<OperatorType.DATA_SOURCE
  :
  'Data Source'
  >,
  function_info=FunctionInfo(module=
  'pandas.io.parsers',
  function_name=
  'read_csv'
  )),
  details=DagNodeDetails(description=
  'patients.csv',
  columns=
  [
    'id',
    'first_name',
    'last_name',
    'race',
    'county',
    'num_children',
    'income',
    'age_group',
    'ssn'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=21,
  col_offset=11,
  end_lineno=22,
  end_col_offset=67),
  source_code=
  'pd.read_csv(os.path.join(str(get_project_root()), "example_pipelines", "healthcare",\n                                    "patients.csv"), na_values=\'?\')'
  )),
  DagNode(node_id=1,
  code_location=BasicCodeLocation(lineno=23),
  operator_info=OperatorContext(operator=<OperatorType.DATA_SOURCE
  :
  'Data Source'
  >,
  function_info=FunctionInfo(module=
  'pandas.io.parsers',
  function_name=
  'read_csv'
  )),
  details=DagNodeDetails(description=
  'histories.csv',
  columns=
  [
    'smoker',
    'complications',
    'ssn'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=23,
  col_offset=12,
  end_lineno=24,
  end_col_offset=69),
  source_code=
  'pd.read_csv(os.path.join(str(get_project_root()), "example_pipelines", "healthcare",\n                                     "histories.csv"), na_values=\'?\')'
  )),
  DagNode(node_id=2,
  code_location=BasicCodeLocation(lineno=26),
  operator_info=OperatorContext(operator=<OperatorType.JOIN
  :
  'Join'
  >,
  function_info=FunctionInfo(module=
  'pandas.core.frame',
  function_name=
  'merge'
  )),
  details=DagNodeDetails(description=
  "on '['ssn']'",
  columns=
  [
    'id',
    'first_name',
    'last_name',
    'race',
    'county',
    'num_children',
    'income',
    'age_group',
    'ssn',
    'smoker',
    'complications'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=26,
  col_offset=7,
  end_lineno=26,
  end_col_offset=44),
  source_code=
  "patients.merge(histories, on=['ssn'])"
  )),
  DagNode(node_id=3,
  code_location=BasicCodeLocation(lineno=27),
  operator_info=OperatorContext(operator=<OperatorType.GROUP_BY_AGG
  :
  'Groupby and Aggregate'
  >,
  function_info=FunctionInfo(module=
  'pandas.core.groupby.generic',
  function_name=
  'agg'
  )),
  details=DagNodeDetails(description=
  "Groupby 'age_group', Aggregate: '{'mean_complications': ('complications', 'mean')}'",
  columns=
  [
    'age_group',
    'mean_complications'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=27,
  col_offset=16,
  end_lineno=28,
  end_col_offset=54),
  source_code=
  "data.groupby('age_group') \\\n    .agg(mean_complications=('complications', 'mean'))"
  )),
  DagNode(node_id=4,
  code_location=BasicCodeLocation(lineno=29),
  operator_info=OperatorContext(operator=<OperatorType.JOIN
  :
  'Join'
  >,
  function_info=FunctionInfo(module=
  'pandas.core.frame',
  function_name=
  'merge'
  )),
  details=DagNodeDetails(description=
  "on '['age_group']'",
  columns=
  [
    'id',
    'first_name',
    'last_name',
    'race',
    'county',
    'num_children',
    'income',
    'age_group',
    'ssn',
    'smoker',
    'complications',
    'mean_complications'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=29,
  col_offset=7,
  end_lineno=29,
  end_col_offset=50),
  source_code=
  "data.merge(complications, on=['age_group'])"
  )),
  DagNode(node_id=5,
  code_location=BasicCodeLocation(lineno=30),
  operator_info=OperatorContext(operator=<OperatorType.PROJECTION
  :
  'Projection'
  >,
  function_info=FunctionInfo(module=
  'pandas.core.frame',
  function_name=
  '__getitem__'
  )),
  details=DagNodeDetails(description=
  "to ['complications']",
  columns=
  [
    'complications'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=30,
  col_offset=16,
  end_lineno=30,
  end_col_offset=37),
  source_code=
  "data['complications']"
  )),
  DagNode(node_id=6,
  code_location=BasicCodeLocation(lineno=30),
  operator_info=OperatorContext(operator=<OperatorType.PROJECTION
  :
  'Projection'
  >,
  function_info=FunctionInfo(module=
  'pandas.core.frame',
  function_name=
  '__getitem__'
  )),
  details=DagNodeDetails(description=
  "to ['mean_complications']",
  columns=
  [
    'mean_complications'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=30,
  col_offset=46,
  end_lineno=30,
  end_col_offset=72),
  source_code=
  "data['mean_complications']"
  )),
  DagNode(node_id=7,
  code_location=BasicCodeLocation(lineno=30),
  operator_info=OperatorContext(operator=<OperatorType.PROJECTION_MODIFY
  :
  'Projection (Modify)'
  >,
  function_info=FunctionInfo(module=
  'pandas.core.frame',
  function_name=
  '__setitem__'
  )),
  details=DagNodeDetails(description=
  "modifies ['label']",
  columns=
  [
    'id',
    'first_name',
    'last_name',
    'race',
    'county',
    'num_children',
    'income',
    'age_group',
    'ssn',
    'smoker',
    'complications',
    'mean_complications',
    'label'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=30,
  col_offset=0,
  end_lineno=30,
  end_col_offset=72),
  source_code=
  "data['label'] = data['complications'] > 1.2 * data['mean_complications']"
  )),
  DagNode(node_id=8,
  code_location=BasicCodeLocation(lineno=31),
  operator_info=OperatorContext(operator=<OperatorType.PROJECTION
  :
  'Projection'
  >,
  function_info=FunctionInfo(module=
  'pandas.core.frame',
  function_name=
  '__getitem__'
  )),
  details=DagNodeDetails(description=
  "to ['smoker', 'last_name', 'county', 'num_children', 'race', 'income', 'label']",
  columns=
  [
    'smoker',
    'last_name',
    'county',
    'num_children',
    'race',
    'income',
    'label'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=31,
  col_offset=7,
  end_lineno=31,
  end_col_offset=89),
  source_code=
  "data[['smoker', 'last_name', 'county', 'num_children', 'race', 'income', 'label']]"
  )),
  DagNode(node_id=9,
  code_location=BasicCodeLocation(lineno=32),
  operator_info=OperatorContext(operator=<OperatorType.PROJECTION
  :
  'Projection'
  >,
  function_info=FunctionInfo(module=
  'pandas.core.frame',
  function_name=
  '__getitem__'
  )),
  details=DagNodeDetails(description=
  "to ['county']",
  columns=
  [
    'county'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=32,
  col_offset=12,
  end_lineno=32,
  end_col_offset=26),
  source_code=
  "data['county']"
  )),
  DagNode(node_id=10,
  code_location=BasicCodeLocation(lineno=32),
  operator_info=OperatorContext(operator=<OperatorType.SELECTION
  :
  'Selection'
  >,
  function_info=FunctionInfo(module=
  'pandas.core.frame',
  function_name=
  '__getitem__'
  )),
  details=DagNodeDetails(description=
  "Select by Series: data[data['county'].isin(COUNTIES_OF_INTEREST)]",
  columns=
  [
    'smoker',
    'last_name',
    'county',
    'num_children',
    'race',
    'income',
    'label'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=32,
  col_offset=7,
  end_lineno=32,
  end_col_offset=54),
  source_code=
  "data[data['county'].isin(COUNTIES_OF_INTEREST)]"
  )),
  DagNode(node_id=11,
  code_location=BasicCodeLocation(lineno=49),
  operator_info=OperatorContext(operator=<OperatorType.TRAIN_TEST_SPLIT
  :
  'Train Test Split'
  >,
  function_info=FunctionInfo(module=
  'sklearn.model_selection._split',
  function_name=
  'train_test_split'
  )),
  details=DagNodeDetails(description=
  '(Train Data)',
  columns=
  [
    'smoker',
    'last_name',
    'county',
    'num_children',
    'race',
    'income',
    'label'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=49,
  col_offset=24,
  end_lineno=49,
  end_col_offset=46),
  source_code=
  'train_test_split(data)'
  )),
  DagNode(node_id=12,
  code_location=BasicCodeLocation(lineno=49),
  operator_info=OperatorContext(operator=<OperatorType.TRAIN_TEST_SPLIT
  :
  'Train Test Split'
  >,
  function_info=FunctionInfo(module=
  'sklearn.model_selection._split',
  function_name=
  'train_test_split'
  )),
  details=DagNodeDetails(description=
  '(Test Data)',
  columns=
  [
    'smoker',
    'last_name',
    'county',
    'num_children',
    'race',
    'income',
    'label'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=49,
  col_offset=24,
  end_lineno=49,
  end_col_offset=46),
  source_code=
  'train_test_split(data)'
  )),
  DagNode(node_id=13,
  code_location=BasicCodeLocation(lineno=50),
  operator_info=OperatorContext(operator=<OperatorType.PROJECTION
  :
  'Projection'
  >,
  function_info=FunctionInfo(module=
  'pandas.core.frame',
  function_name=
  '__getitem__'
  )),
  details=DagNodeDetails(description=
  "to ['label']",
  columns=
  [
    'label'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=50,
  col_offset=33,
  end_lineno=50,
  end_col_offset=52),
  source_code=
  "train_data['label']"
  )),
  DagNode(node_id=14,
  code_location=BasicCodeLocation(lineno=38),
  operator_info=OperatorContext(operator=<OperatorType.PROJECTION
  :
  'Projection'
  >,
  function_info=FunctionInfo(module=
  'sklearn.compose._column_transformer',
  function_name=
  'ColumnTransformer'
  )),
  details=DagNodeDetails(description=
  "to ['smoker', 'county', 'race']",
  columns=
  [
    'smoker',
    'county',
    'race'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=38,
  col_offset=16,
  end_lineno=42,
  end_col_offset=20),
  source_code=
  'ColumnTransformer(transformers=[\n    ("impute_and_one_hot_encode", impute_and_one_hot_encode, [\'smoker\', \'county\', \'race\']),\n    (\'word2vec\', MyW2VTransformer(min_count=2), [\'last_name\']),\n    (\'numeric\', StandardScaler(), [\'num_children\', \'income\']),\n], remainder=\'drop\')'
  )),
  DagNode(node_id=15,
  code_location=BasicCodeLocation(lineno=35),
  operator_info=OperatorContext(operator=<OperatorType.TRANSFORMER
  :
  'Transformer'
  >,
  function_info=FunctionInfo(module=
  'sklearn.impute._base',
  function_name=
  'SimpleImputer'
  )),
  details=DagNodeDetails(description=
  'Simple Imputer: fit_transform',
  columns=
  [
    'smoker',
    'county',
    'race'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=35,
  col_offset=15,
  end_lineno=35,
  end_col_offset=54),
  source_code=
  "SimpleImputer(strategy='most_frequent')"
  )),
  DagNode(node_id=16,
  code_location=BasicCodeLocation(lineno=36),
  operator_info=OperatorContext(operator=<OperatorType.TRANSFORMER
  :
  'Transformer'
  >,
  function_info=FunctionInfo(module=
  'sklearn.preprocessing._encoders',
  function_name=
  'OneHotEncoder'
  )),
  details=DagNodeDetails(description=
  'One-Hot Encoder: fit_transform',
  columns=
  [
    'array'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=36,
  col_offset=15,
  end_lineno=36,
  end_col_offset=67),
  source_code=
  "OneHotEncoder(sparse=False, handle_unknown='ignore')"
  )),
  DagNode(node_id=17,
  code_location=BasicCodeLocation(lineno=38),
  operator_info=OperatorContext(operator=<OperatorType.PROJECTION
  :
  'Projection'
  >,
  function_info=FunctionInfo(module=
  'sklearn.compose._column_transformer',
  function_name=
  'ColumnTransformer'
  )),
  details=DagNodeDetails(description=
  "to ['last_name']",
  columns=
  [
    'last_name'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=38,
  col_offset=16,
  end_lineno=42,
  end_col_offset=20),
  source_code=
  'ColumnTransformer(transformers=[\n    ("impute_and_one_hot_encode", impute_and_one_hot_encode, [\'smoker\', \'county\', \'race\']),\n    (\'word2vec\', MyW2VTransformer(min_count=2), [\'last_name\']),\n    (\'numeric\', StandardScaler(), [\'num_children\', \'income\']),\n], remainder=\'drop\')'
  )),
  DagNode(node_id=18,
  code_location=BasicCodeLocation(lineno=38),
  operator_info=OperatorContext(operator=<OperatorType.PROJECTION
  :
  'Projection'
  >,
  function_info=FunctionInfo(module=
  'sklearn.compose._column_transformer',
  function_name=
  'ColumnTransformer'
  )),
  details=DagNodeDetails(description=
  "to ['num_children', 'income']",
  columns=
  [
    'num_children',
    'income'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=38,
  col_offset=16,
  end_lineno=42,
  end_col_offset=20),
  source_code=
  'ColumnTransformer(transformers=[\n    ("impute_and_one_hot_encode", impute_and_one_hot_encode, [\'smoker\', \'county\', \'race\']),\n    (\'word2vec\', MyW2VTransformer(min_count=2), [\'last_name\']),\n    (\'numeric\', StandardScaler(), [\'num_children\', \'income\']),\n], remainder=\'drop\')'
  )),
  DagNode(node_id=19,
  code_location=BasicCodeLocation(lineno=41),
  operator_info=OperatorContext(operator=<OperatorType.TRANSFORMER
  :
  'Transformer'
  >,
  function_info=FunctionInfo(module=
  'sklearn.preprocessing._data',
  function_name=
  'StandardScaler'
  )),
  details=DagNodeDetails(description=
  'Standard Scaler: fit_transform',
  columns=
  [
    'array'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=41,
  col_offset=16,
  end_lineno=41,
  end_col_offset=32),
  source_code=
  'StandardScaler()'
  )),
  DagNode(node_id=-1,
  code_location=BasicCodeLocation(lineno=38),
  operator_info=OperatorContext(operator=<OperatorType.MISSING_OP
  :
  'Encountered unsupported operation! Fallback: Data Source'
  >,
  function_info=None),
  details=DagNodeDetails(description=
  'Warning! Operator F:\\UNI\\ws25\\EDML\\mlinspect\\example_pipelines\\healthcare\\healthcare.py:38 (ColumnTransformer(transformers=[\n    ("impute_and_one_hot_encode", impute_and_one_hot_encode, [\'smoker\', \'county\', \'race\']),\n    (\'word2vec\', MyW2VTransformer(min_count=2), [\'last_name\']),\n    (\'numeric\', StandardScaler(), [\'num_children\', \'income\']),\n], remainder=\'drop\')) encountered a DataFrame resulting from an operation without mlinspect support!',
  columns=
  [
    'array'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=38,
  col_offset=16,
  end_lineno=42,
  end_col_offset=20),
  source_code=
  'ColumnTransformer(transformers=[\n    ("impute_and_one_hot_encode", impute_and_one_hot_encode, [\'smoker\', \'county\', \'race\']),\n    (\'word2vec\', MyW2VTransformer(min_count=2), [\'last_name\']),\n    (\'numeric\', StandardScaler(), [\'num_children\', \'income\']),\n], remainder=\'drop\')'
  )),
  DagNode(node_id=20,
  code_location=BasicCodeLocation(lineno=38),
  operator_info=OperatorContext(operator=<OperatorType.CONCATENATION
  :
  'Concatenation'
  >,
  function_info=FunctionInfo(module=
  'sklearn.compose._column_transformer',
  function_name=
  'ColumnTransformer'
  )),
  details=DagNodeDetails(description=None,
  columns=
  [
    'array'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=38,
  col_offset=16,
  end_lineno=42,
  end_col_offset=20),
  source_code=
  'ColumnTransformer(transformers=[\n    ("impute_and_one_hot_encode", impute_and_one_hot_encode, [\'smoker\', \'county\', \'race\']),\n    (\'word2vec\', MyW2VTransformer(min_count=2), [\'last_name\']),\n    (\'numeric\', StandardScaler(), [\'num_children\', \'income\']),\n], remainder=\'drop\')'
  )),
  DagNode(node_id=21,
  code_location=BasicCodeLocation(lineno=43),
  operator_info=OperatorContext(operator=<OperatorType.TRAIN_DATA
  :
  'Train Data'
  >,
  function_info=FunctionInfo(module=
  'scikeras.wrappers',
  function_name=
  'KerasClassifier'
  )),
  details=DagNodeDetails(description=None,
  columns=
  [
    'array'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=43,
  col_offset=13,
  end_lineno=44,
  end_col_offset=84),
  source_code=
  'KerasClassifier(model=create_model, epochs=10, batch_size=1, verbose=0,\n                             hidden_layer_sizes=(9, 9,), loss="binary_crossentropy")'
  )),
  DagNode(node_id=22,
  code_location=BasicCodeLocation(lineno=43),
  operator_info=OperatorContext(operator=<OperatorType.TRAIN_LABELS
  :
  'Train Labels'
  >,
  function_info=FunctionInfo(module=
  'scikeras.wrappers',
  function_name=
  'KerasClassifier'
  )),
  details=DagNodeDetails(description=None,
  columns=
  [
    'array'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=43,
  col_offset=13,
  end_lineno=44,
  end_col_offset=84),
  source_code=
  'KerasClassifier(model=create_model, epochs=10, batch_size=1, verbose=0,\n                             hidden_layer_sizes=(9, 9,), loss="binary_crossentropy")'
  )),
  DagNode(node_id=23,
  code_location=BasicCodeLocation(lineno=43),
  operator_info=OperatorContext(operator=<OperatorType.ESTIMATOR
  :
  'Estimator'
  >,
  function_info=FunctionInfo(module=
  'scikeras.wrappers',
  function_name=
  'KerasClassifier'
  )),
  details=DagNodeDetails(description=
  'Neural Network',
  columns=
  []
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=43,
  col_offset=13,
  end_lineno=44,
  end_col_offset=84),
  source_code=
  'KerasClassifier(model=create_model, epochs=10, batch_size=1, verbose=0,\n                             hidden_layer_sizes=(9, 9,), loss="binary_crossentropy")'
  )),
  DagNode(node_id=24,
  code_location=BasicCodeLocation(lineno=51),
  operator_info=OperatorContext(operator=<OperatorType.PROJECTION
  :
  'Projection'
  >,
  function_info=FunctionInfo(module=
  'pandas.core.frame',
  function_name=
  '__getitem__'
  )),
  details=DagNodeDetails(description=
  "to ['label']",
  columns=
  [
    'label'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=51,
  col_offset=47,
  end_lineno=51,
  end_col_offset=65),
  source_code=
  "test_data['label']"
  )),
  DagNode(node_id=25,
  code_location=BasicCodeLocation(lineno=38),
  operator_info=OperatorContext(operator=<OperatorType.PROJECTION
  :
  'Projection'
  >,
  function_info=FunctionInfo(module=
  'sklearn.compose._column_transformer',
  function_name=
  'ColumnTransformer'
  )),
  details=DagNodeDetails(description=
  "to ['smoker', 'county', 'race']",
  columns=
  [
    'smoker',
    'county',
    'race'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=38,
  col_offset=16,
  end_lineno=42,
  end_col_offset=20),
  source_code=
  'ColumnTransformer(transformers=[\n    ("impute_and_one_hot_encode", impute_and_one_hot_encode, [\'smoker\', \'county\', \'race\']),\n    (\'word2vec\', MyW2VTransformer(min_count=2), [\'last_name\']),\n    (\'numeric\', StandardScaler(), [\'num_children\', \'income\']),\n], remainder=\'drop\')'
  )),
  DagNode(node_id=26,
  code_location=BasicCodeLocation(lineno=35),
  operator_info=OperatorContext(operator=<OperatorType.TRANSFORMER
  :
  'Transformer'
  >,
  function_info=FunctionInfo(module=
  'sklearn.impute._base',
  function_name=
  'SimpleImputer'
  )),
  details=DagNodeDetails(description=
  'Simple Imputer: transform',
  columns=
  [
    'smoker',
    'county',
    'race'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=35,
  col_offset=15,
  end_lineno=35,
  end_col_offset=54),
  source_code=
  "SimpleImputer(strategy='most_frequent')"
  )),
  DagNode(node_id=27,
  code_location=BasicCodeLocation(lineno=36),
  operator_info=OperatorContext(operator=<OperatorType.TRANSFORMER
  :
  'Transformer'
  >,
  function_info=FunctionInfo(module=
  'sklearn.preprocessing._encoders',
  function_name=
  'OneHotEncoder'
  )),
  details=DagNodeDetails(description=
  'One-Hot Encoder: transform',
  columns=
  [
    'array'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=36,
  col_offset=15,
  end_lineno=36,
  end_col_offset=67),
  source_code=
  "OneHotEncoder(sparse=False, handle_unknown='ignore')"
  )),
  DagNode(node_id=28,
  code_location=BasicCodeLocation(lineno=38),
  operator_info=OperatorContext(operator=<OperatorType.PROJECTION
  :
  'Projection'
  >,
  function_info=FunctionInfo(module=
  'sklearn.compose._column_transformer',
  function_name=
  'ColumnTransformer'
  )),
  details=DagNodeDetails(description=
  "to ['last_name']",
  columns=
  [
    'last_name'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=38,
  col_offset=16,
  end_lineno=42,
  end_col_offset=20),
  source_code=
  'ColumnTransformer(transformers=[\n    ("impute_and_one_hot_encode", impute_and_one_hot_encode, [\'smoker\', \'county\', \'race\']),\n    (\'word2vec\', MyW2VTransformer(min_count=2), [\'last_name\']),\n    (\'numeric\', StandardScaler(), [\'num_children\', \'income\']),\n], remainder=\'drop\')'
  )),
  DagNode(node_id=29,
  code_location=BasicCodeLocation(lineno=38),
  operator_info=OperatorContext(operator=<OperatorType.PROJECTION
  :
  'Projection'
  >,
  function_info=FunctionInfo(module=
  'sklearn.compose._column_transformer',
  function_name=
  'ColumnTransformer'
  )),
  details=DagNodeDetails(description=
  "to ['num_children', 'income']",
  columns=
  [
    'num_children',
    'income'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=38,
  col_offset=16,
  end_lineno=42,
  end_col_offset=20),
  source_code=
  'ColumnTransformer(transformers=[\n    ("impute_and_one_hot_encode", impute_and_one_hot_encode, [\'smoker\', \'county\', \'race\']),\n    (\'word2vec\', MyW2VTransformer(min_count=2), [\'last_name\']),\n    (\'numeric\', StandardScaler(), [\'num_children\', \'income\']),\n], remainder=\'drop\')'
  )),
  DagNode(node_id=30,
  code_location=BasicCodeLocation(lineno=41),
  operator_info=OperatorContext(operator=<OperatorType.TRANSFORMER
  :
  'Transformer'
  >,
  function_info=FunctionInfo(module=
  'sklearn.preprocessing._data',
  function_name=
  'StandardScaler'
  )),
  details=DagNodeDetails(description=
  'Standard Scaler: transform',
  columns=
  [
    'array'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=41,
  col_offset=16,
  end_lineno=41,
  end_col_offset=32),
  source_code=
  'StandardScaler()'
  )),
  DagNode(node_id=-2,
  code_location=BasicCodeLocation(lineno=38),
  operator_info=OperatorContext(operator=<OperatorType.MISSING_OP
  :
  'Encountered unsupported operation! Fallback: Data Source'
  >,
  function_info=None),
  details=DagNodeDetails(description=
  'Warning! Operator F:\\UNI\\ws25\\EDML\\mlinspect\\example_pipelines\\healthcare\\healthcare.py:38 (ColumnTransformer(transformers=[\n    ("impute_and_one_hot_encode", impute_and_one_hot_encode, [\'smoker\', \'county\', \'race\']),\n    (\'word2vec\', MyW2VTransformer(min_count=2), [\'last_name\']),\n    (\'numeric\', StandardScaler(), [\'num_children\', \'income\']),\n], remainder=\'drop\')) encountered a DataFrame resulting from an operation without mlinspect support!',
  columns=
  [
    'array'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=38,
  col_offset=16,
  end_lineno=42,
  end_col_offset=20),
  source_code=
  'ColumnTransformer(transformers=[\n    ("impute_and_one_hot_encode", impute_and_one_hot_encode, [\'smoker\', \'county\', \'race\']),\n    (\'word2vec\', MyW2VTransformer(min_count=2), [\'last_name\']),\n    (\'numeric\', StandardScaler(), [\'num_children\', \'income\']),\n], remainder=\'drop\')'
  )),
  DagNode(node_id=31,
  code_location=BasicCodeLocation(lineno=38),
  operator_info=OperatorContext(operator=<OperatorType.CONCATENATION
  :
  'Concatenation'
  >,
  function_info=FunctionInfo(module=
  'sklearn.compose._column_transformer',
  function_name=
  'ColumnTransformer'
  )),
  details=DagNodeDetails(description=None,
  columns=
  [
    'array'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=38,
  col_offset=16,
  end_lineno=42,
  end_col_offset=20),
  source_code=
  'ColumnTransformer(transformers=[\n    ("impute_and_one_hot_encode", impute_and_one_hot_encode, [\'smoker\', \'county\', \'race\']),\n    (\'word2vec\', MyW2VTransformer(min_count=2), [\'last_name\']),\n    (\'numeric\', StandardScaler(), [\'num_children\', \'income\']),\n], remainder=\'drop\')'
  )),
  DagNode(node_id=32,
  code_location=BasicCodeLocation(lineno=51),
  operator_info=OperatorContext(operator=<OperatorType.TEST_DATA
  :
  'Test Data'
  >,
  function_info=FunctionInfo(module=
  'scikeras.wrappers.KerasClassifier',
  function_name=
  'score'
  )),
  details=DagNodeDetails(description=None,
  columns=
  [
    'array'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=51,
  col_offset=24,
  end_lineno=51,
  end_col_offset=66),
  source_code=
  "model.score(test_data, test_data['label'])"
  )),
  DagNode(node_id=33,
  code_location=BasicCodeLocation(lineno=51),
  operator_info=OperatorContext(operator=<OperatorType.TEST_LABELS
  :
  'Test Labels'
  >,
  function_info=FunctionInfo(module=
  'scikeras.wrappers.KerasClassifier',
  function_name=
  'score'
  )),
  details=DagNodeDetails(description=None,
  columns=
  [
    'label'
  ]
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=51,
  col_offset=24,
  end_lineno=51,
  end_col_offset=66),
  source_code=
  "model.score(test_data, test_data['label'])"
  )),
  DagNode(node_id=34,
  code_location=BasicCodeLocation(lineno=51),
  operator_info=OperatorContext(operator=<OperatorType.SCORE
  :
  'Score'
  >,
  function_info=FunctionInfo(module=
  'scikeras.wrappers.KerasClassifier',
  function_name=
  'score'
  )),
  details=DagNodeDetails(description=
  'Neural Network',
  columns=
  []
  ),
  optional_code_info=OptionalCodeInfo(code_reference=CodeReference(lineno=51,
  col_offset=24,
  end_lineno=51,
  end_col_offset=66),
  source_code=
  "model.score(test_data, test_data['label'])"
  ))
]
