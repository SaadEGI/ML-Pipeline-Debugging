{
  "dag": {
    "nodes": [
      {
        "id": "node1",
        "name": "Load Data",
        "operation": "pd.read_csv",
        "parameters": {
          "file_path": "datasets/adult_data/adult_data.csv"
        },
        "code": "raw_data_file = os.path.join(project_root, \"datasets\", \"adult_data\", \"adult_data.csv\")\ndata = pd.read_csv(raw_data_file)",
        "code_line": "16-17"
      },
      {
        "id": "node2",
        "name": "Preprocess Occupation",
        "operation": "String Preprocessing",
        "parameters": {
          "column": "occupation",
          "methods": [
            "to_lowercase",
            {
              "replace": {
                "old": "-",
                "new": " "
              }
            }
          ]
        },
        "code": "data['occupation'] = data['occupation'].str.lower()\ndata['occupation'] = data['occupation'].str.replace('-', ' ')",
        "code_line": "18-19"
      },
      {
        "id": "node3",
        "name": "Preprocess Native-Country",
        "operation": "Apply Lambda",
        "parameters": {
          "column": "native-country",
          "transformation": "set_value('North America')"
        },
        "code": "data['native-country'] = data['native-country'].apply(lambda x: 'North America')",
        "code_line": "20"
      },
      {
        "id": "node4",
        "name": "Train-Test Split",
        "operation": "train_test_split",
        "parameters": {
          "test_size": 0.2,
          "target_column": "salary"
        },
        "code": "X_train, X_test, y_train, y_test = train_test_split(data.drop('salary', axis=1), data['salary'], test_size=0.2)",
        "code_line": "21"
      },
      {
        "id": "node5",
        "name": "Select Numeric Features",
        "operation": "select_dtypes",
        "parameters": {
          "include": ["int64", "float64"]
        },
        "code": "numeric_features = X_train.select_dtypes(include=['int64', 'float64']).columns",
        "code_line": "22"
      },
      {
        "id": "node6",
        "name": "Select Categorical Features",
        "operation": "select_dtypes",
        "parameters": {
          "include": ["object"]
        },
        "code": "categorical_features = X_train.select_dtypes(include=['object']).columns",
        "code_line": "23"
      },
      {
        "id": "node7",
        "name": "Numeric Transformer Pipeline",
        "operation": "Pipeline",
        "parameters": {
          "steps": [
            {
              "name": "imputer",
              "operation": "SimpleImputer",
              "parameters": {
                "strategy": "median"
              }
            },
            {
              "name": "normalizer",
              "operation": "Normalizer",
              "parameters": {}
            }
          ]
        },
        "code": "numeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('normalizer', Normalizer())\n])",
        "code_line": "24-27"
      },
      {
        "id": "node8",
        "name": "Categorical Transformer Pipeline",
        "operation": "Pipeline",
        "parameters": {
          "steps": [
            {
              "name": "imputer",
              "operation": "SimpleImputer",
              "parameters": {
                "strategy": "constant",
                "fill_value": "missing"
              }
            },
            {
              "name": "onehot",
              "operation": "OneHotEncoder",
              "parameters": {
                "handle_unknown": "ignore"
              }
            }
          ]
        },
        "code": "categorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n])",
        "code_line": "28-31"
      },
      {
        "id": "node9",
        "name": "Column Transformer",
        "operation": "ColumnTransformer",
        "parameters": {
          "transformers": [
            {
              "name": "num",
              "transformer": "node7",
              "columns": "numeric_features"
            },
            {
              "name": "cat",
              "transformer": "node8",
              "columns": "categorical_features"
            }
          ]
        },
        "code": "preprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_features),\n        ('cat', categorical_transformer, categorical_features)\n    ]\n)",
        "code_line": "32-37"
      },
      {
        "id": "node10",
        "name": "Final Pipeline",
        "operation": "Pipeline",
        "parameters": {
          "steps": [
            {
              "name": "preprocessor",
              "operation": "node9"
            },
            {
              "name": "classifier",
              "operation": "RandomForestClassifier",
              "parameters": {}
            }
          ]
        },
        "code": "pipeline = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('classifier', RandomForestClassifier())\n])",
        "code_line": "38-41"
      },
      {
        "id": "node11",
        "name": "Train Model",
        "operation": "fit",
        "parameters": {},
        "code": "pipeline.fit(X_train, y_train)",
        "code_line": "42"
      },
      {
        "id": "node12",
        "name": "Score Model",
        "operation": "score",
        "parameters": {},
        "code": "score = pipeline.score(X_test, y_test)\nprint(f\"Model accuracy: {score:.2f}\")",
        "code_line": "43-44"
      },
      {
        "id": "node13",
        "name": "Predict",
        "operation": "predict",
        "parameters": {},
        "code": "y_pred = pipeline.predict(X_test)",
        "code_line": "45"
      },
      {
        "id": "node14",
        "name": "Classification Report",
        "operation": "classification_report",
        "parameters": {
          "zero_division": 0
        },
        "code": "print(classification_report(y_test, y_pred, zero_division=0))",
        "code_line": "46"
      }
    ],
    "edges": [
      {
        "source": "node1",
        "target": "node2"
      },
      {
        "source": "node1",
        "target": "node3"
      },
      {
        "source": "node2",
        "target": "node4"
      },
      {
        "source": "node3",
        "target": "node4"
      },
      {
        "source": "node4",
        "target": "node5"
      },
      {
        "source": "node4",
        "target": "node6"
      },
      {
        "source": "node5",
        "target": "node7"
      },
      {
        "source": "node6",
        "target": "node8"
      },
      {
        "source": "node7",
        "target": "node9"
      },
      {
        "source": "node8",
        "target": "node9"
      },
      {
        "source": "node9",
        "target": "node10"
      },
      {
        "source": "node10",
        "target": "node11"
      },
      {
        "source": "node4",
        "target": "node11"
      },
      {
        "source": "node11",
        "target": "node12"
      },
      {
        "source": "node4",
        "target": "node12"
      },
      {
        "source": "node11",
        "target": "node13"
      },
      {
        "source": "node4",
        "target": "node13"
      },
      {
        "source": "node13",
        "target": "node14"
      },
      {
        "source": "node4",
        "target": "node14"
      }
    ]
  }
}
